#!/usr/bin/env bash
# bashsupport disable=BP5008
# Usage:
#   ./install          # Clone my dotfiles
#   DEBUG=1 ./install  # Copy the local dotfiles directory instead of cloning
#
#   # Customize which dotfiles URL to clone from
#   DOTFILES_URL="https://github.com/example/dotfiles" ./install

set -o errexit

SKIP_SYSTEM_PACKAGES="${1:-}"

APT_PACKAGES="curl git iproute2 tmux zsh xz-utils build-essential python3-venv"
APT_PACKAGES_OPTIONAL="gnupg htop zip unzip"

OS_TYPE="$(uname | tr "[:upper:]" "[:lower:]")"

DOTFILES_URL="${DOTFILES_URL:-https://github.com/sassdavid/dotfiles}"
DOTFILES_PATH="${DOTFILES_PATH:-"${HOME}/dotfiles"}"

# -----------------------------------------------------------------------------
# Helper functions
# -----------------------------------------------------------------------------

_error() {
  local message="${1:-}"

  printf "\e[31;1mERROR:\e[0m %s\n\n" "${message}" >&2
  exit 1
}

_info() {
  local message="${1:-}"
  printf "\n\n\e[36;1m%s:\e[0m\n\n" "${message}"
}

_no_system_packages() {
  cat <<EOF
System package installation isn't supported with your OS / distro.

Please install any dependent packages on your own. You can view the list at:

    https://github.com/sassdavid/dotfiles/blob/master/install

Then re-run the script and explicitly skip installing system packages:

    bash <(curl -sS https://raw.githubusercontent.com/sassdavid/dotfiles/main/install) --skip-system-packages
EOF

  exit 1
}

_install_packages_apt() {
  sudo add-apt-repository -y ppa:git-core/ppa

  # shellcheck disable=SC2086
  sudo apt-get update && sudo apt-get upgrade -y && sudo apt-get install -y ${APT_PACKAGES} ${APT_PACKAGES_OPTIONAL}

  sudo apt-get clean && sudo rm -rf /var/lib/apt/lists /var/cache/apt/archives
}

_display_packages() {
  if [ "${OS_TYPE}" == "linux" ]; then
    echo "${APT_PACKAGES} ${APT_PACKAGES_OPTIONAL}"
  fi
}

# -----------------------------------------------------------------------------
# Main functions
# -----------------------------------------------------------------------------

detect_env() {
  case "${OS_TYPE}" in
  linux)
    if [ ! -f "/etc/debian_version" ]; then
      [ -z "${SKIP_SYSTEM_PACKAGES}" ] && _no_system_packages
    fi

    ;;
  esac
}

create_initial_dirs() {
  mkdir -p "${HOME}/.config/tmux/plugins" "${HOME}/.config/git" "${HOME}/.config/zsh" "${HOME}/.cache/zsh" \
    "${HOME}/.local/bin" "${HOME}/.local/share" "${HOME}/.config/gitalias" \
    "${HOME}/.local/share/zsh/completions" "${HOME}/.local/state" "${HOME}/.aws" \
    "${HOME}/.kube"
}

install_packages() {
  _info "INSTALL PACKAGES"

  if [ -n "${SKIP_SYSTEM_PACKAGES}" ]; then
    echo "Skipping, you've chosen not to or your OS is unsupported"
    return
  fi

  cat <<EOF
If you choose y, all of the system packages below will be installed:

$(_display_packages)

If you choose no, the above packages will not be installed and this script
will exit. This gives you a chance to edit the list of packages if you don't
agree with any of the decisions.

The packages listed after xz are technically optional but are quite useful.
Certain aliases depend on these optional packages being installed.

EOF

  while true; do
    read -rp "Do you want to install the above packages? (y/n) " yn
    case "${yn}" in
    [Yy]*)
      if [ "${OS_TYPE}" == "linux" ]; then
        _install_packages_apt
      fi

      break
      ;;
    [Nn]*) exit ;;
    *) printf "Please answer y or n\n\n" ;;
    esac
  done

}

clone_or_update_dotfiles() {
  _info "CLONE OR UPDATE DOTFILES"

  local local_zprofile="${HOME}/.config/zsh/.zprofile.local"

  if [ -f "${local_zprofile}" ]; then
    # shellcheck disable=SC1090
    . "${local_zprofile}"
  fi

  local dotfiles_path
  read -rep "Where do you want to clone these dotfiles to [${DOTFILES_PATH}]? " dotfiles_path
  echo

  [[ -z "${dotfiles_path}" ]] && dotfiles_path="${DOTFILES_PATH}"

  # bashsupport disable=BP5006
  DOTFILES_PATH="${dotfiles_path//\~/"${HOME}"}"

  # This is used to locally develop the install script.
  if [ "${DEBUG}" == "1" ]; then
    if [ "${PWD}" != "${DOTFILES_PATH}" ]; then
      cp -R "${PWD}/." "${DOTFILES_PATH}"
    fi

    printf "They've been copied to '%s'\n" "${DOTFILES_PATH}"
    return
  fi

  if [ -e "${DOTFILES_PATH}" ]; then
    # Let's get the latest updates.
    git -C "${DOTFILES_PATH}" pull
  else
    mkdir -p "$(dirname "${DOTFILES_PATH}")"
    git clone "${DOTFILES_URL}" "${DOTFILES_PATH}"
  fi
}

install_zsh_plugins() {
  _info "INSTALL ZSH PLUGINS"

  "${DOTFILES_PATH}/.local/bin/update-zsh-plugins"
}

install_mongodb_stuffs() {
  _info "INSTALL MONGODB STUFFS"

  "${DOTFILES_PATH}/.local/bin/install-mongodb-stuffs"
}

create_symlinks() {
  _info "CREATE SYMLINKS"

  cat <<EOF
-------------------------------------------------------------------------------

ln -fs "${DOTFILES_PATH}/.zshenv" "${HOME}/.zshenv"
ln -fs "${DOTFILES_PATH}/.config/zsh/.zshrc" "${HOME}/.config/zsh/.zshrc"
ln -fs "${DOTFILES_PATH}/.config/zsh/.zshrc.local" "${HOME}/.config/zsh/.zshrc.local"
ln -fs "${DOTFILES_PATH}/.config/zsh/.zprofile" "${HOME}/.config/zsh/.zprofile"
ln -fs "${DOTFILES_PATH}/.config/zsh/.zprofile.local" "${HOME}/.config/zsh/.zprofile.local"
ln -fs "${DOTFILES_PATH}/.config/zsh/.aliases" "${HOME}/.config/zsh/.aliases"
ln -fs "${DOTFILES_PATH}/.config/zsh/.aliases.local" "${HOME}/.config/zsh/.aliases.local"
ln -fs "${DOTFILES_PATH}/.config/tmux/tmux.conf" "${HOME}/.config/tmux/tmux.conf"
ln -fs "${DOTFILES_PATH}/.config/zsh/themes" "${HOME}/.config/zsh/themes"
ln -fs "${DOTFILES_PATH}/.config/tmux/themes" "${HOME}/.config/tmux/themes"
ln -fs "${DOTFILES_PATH}/.config/git/config" "${HOME}/.config/git/config"
ln -fs "${DOTFILES_PATH}/.config/gitui" "${HOME}/.config/gitui"
ln -fs "${DOTFILES_PATH}/.config/nvim" "${HOME}/.config/nvim"
ln -fs "${DOTFILES_PATH}/.local/bin/"* "${HOME}/.local/bin/"
ln -fs "/c/Windows/System32/cmd.exe" "${HOME}/.local/bin/cmd.exe"

# And if you happen to be using WSL:
sudo ln -fs "${DOTFILES_PATH}/etc/wsl.conf" /etc/wsl.conf

-------------------------------------------------------------------------------

A potentially dangerous action is about to happen. The above directories and
files are going to get forcefully symlinked if you type y in the prompt below.

What does that mean?

Any config files you have on the right hand side of the paths are going to get
overwritten with the files that come with these dotfiles (left side).

Without these symlinks, these dotfiles will not work. If you plan to type y
and have existing files now would be a good time to back them up.

EOF

  while true; do
    read -rep "Ready to continue? Enter y to apply them all or n to skip (y/n) " yn
    case "${yn}" in
    [Yy]*)
      # We're being extra careful here to only delete symlinks if they exist.
      # Technically rm -f would work but that could delete real files potentially.
      [ -L "${HOME}/.config/zsh/themes" ] && rm "${HOME}/.config/zsh/themes"
      [ -L "${HOME}/.config/tmux/themes" ] && rm "${HOME}/.config/tmux/themes"
      [ -L "${HOME}/.config/gitui" ] && rm "${HOME}/.config/gitui"
      [ -L "${HOME}/.config/nvim" ] && rm "${HOME}/.config/nvim"

      ln -fs "${DOTFILES_PATH}/.zshenv" "${HOME}/.zshenv" &&
        ln -fs "${DOTFILES_PATH}/.config/zsh/.zshrc" "${HOME}/.config/zsh/.zshrc" &&
        ln -fs "${DOTFILES_PATH}/.config/zsh/.zshrc.local" "${HOME}/.config/zsh/.zshrc.local" &&
        ln -fs "${DOTFILES_PATH}/.config/zsh/.zprofile" "${HOME}/.config/zsh/.zprofile" &&
        ln -fs "${DOTFILES_PATH}/.config/zsh/.zprofile.local" "${HOME}/.config/zsh/.zprofile.local" &&
        ln -fs "${DOTFILES_PATH}/.config/zsh/.aliases" "${HOME}/.config/zsh/.aliases" &&
        ln -fs "${DOTFILES_PATH}/.config/zsh/.aliases.local" "${HOME}/.config/zsh/.aliases.local" &&
        ln -fs "${DOTFILES_PATH}/.config/tmux/tmux.conf" "${HOME}/.config/tmux/tmux.conf" &&
        ln -fs "${DOTFILES_PATH}/.config/zsh/themes" "${HOME}/.config/zsh/themes" &&
        ln -fs "${DOTFILES_PATH}/.config/tmux/themes" "${HOME}/.config/tmux/themes" &&
        ln -fs "${DOTFILES_PATH}/.config/git/config" "${HOME}/.config/git/config" &&
        ln -fs "${DOTFILES_PATH}/.config/gitui" "${HOME}/.config/gitui" &&
        ln -fs "${DOTFILES_PATH}/.config/nvim" "${HOME}/.config/nvim" &&
        ln -fs "${DOTFILES_PATH}/.local/bin/"* "${HOME}/.local/bin/" &&
        ln -fs "/c/Windows/System32/cmd.exe" "${HOME}/.local/bin/cmd.exe"

      if grep -qE "(Microsoft|microsoft|WSL)" /proc/version &>/dev/null; then
        sudo ln -fs "${DOTFILES_PATH}/etc/wsl.conf" /etc/wsl.conf
      fi

      break
      ;;
    [Nn]*)

      break
      ;;
    *) echo "Please answer y or n" ;;
    esac
  done
}

configure_shell() {
  _info "CONFIGURE SHELL"

  local local_files=(".zshrc.local" ".zprofile.local" ".aliases.local")
  local original_dotfiles_path="${DOTFILES_PATH}"

  local file
  for file in "${local_files[@]}"; do
    local file_path="${HOME}/.config/zsh/${file}"

    if [ ! -f "${file_path}" ]; then
      printf "# shellcheck shell=bash\n\n# Any settings defined here are gitignored\n" >"${file_path}"
    fi
  done

  local zprofile_path="${DOTFILES_PATH}/.config/zsh/.zprofile.local"
  if ! grep -q "^export DOTFILES_PATH=.*$" "${zprofile_path}" 2>/dev/null; then
    printf '\nexport DOTFILES_PATH="%s"\n' "${DOTFILES_PATH}" >>"${zprofile_path}"
  fi

  [ "${SHELL}" != "$(command -v zsh)" ] && chsh -s "$(command -v zsh)"

  # shellcheck disable=SC1091
  . "${HOME}/.config/zsh/.zprofile"

  # Given the above line sets this env var if it's defined, this ensures we
  # always use the value that was set when running this script. This is mainly
  # to make testing this script easier in Docker since the .local files are
  # volume mounted and this value will be different in Docker.
  # bashsupport disable=BP5006
  DOTFILES_PATH="${original_dotfiles_path}"

  echo "It has been configured in '${HOME}/.config.zsh/'"
}

configure_git() {
  _info "CONFIGURE GIT"

  local git_config_path="${HOME}/.config/git"
  local git_personal_path="${git_config_path}/config.user.personal"
  local git_work_path="${git_config_path}/config.user.work"
  local git_bitbucket_path="${git_config_path}/config.user.bitbucket"

  cp -n "${DOTFILES_PATH}/.config/git/config.user.personal" "${git_personal_path}" 2>/dev/null || true
  cp -n "${DOTFILES_PATH}/.config/git/config.user.work" "${git_work_path}" 2>/dev/null || true
  cp -n "${DOTFILES_PATH}/.config/git/config.user.bitbucket" "${git_bitbucket_path}" 2>/dev/null || true

  curl https://raw.githubusercontent.com/GitAlias/gitalias/main/gitalias.txt -o "${HOME}/.config/gitalias/gitalias.txt"

  echo "It has been configured in '${git_personal_path}'"
  echo "It has been configured in '${git_work_path}'"
  echo "It has been configured in '${git_bitbucket_path}'"
}

install_rust() {
  _info "INSTALL RUST"

  local rust_lang_home="${HOME}/rust-lang"
  local cargo_home="${rust_lang_home}/.cargo"
  local cargo_bin_home="${cargo_home}/bin"

  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path

  "${cargo_bin_home}/rustup" completions zsh >"${HOME}/.local/share/zsh/completions/_rustup"
  "${cargo_bin_home}/rustup" completions zsh cargo >"${HOME}/.local/share/zsh/completions/_cargo"
}

install_mise() {
  _info "INSTALL MISE"

  curl https://mise.run | sh

  local shell_name=${ZSH_VERSION:+zsh}${BASH_VERSION:+bash}

  if type "${HOME}/.local/bin/mise" &>/dev/null; then
    if [[ -t 0 ]]; then
      eval "$("${HOME}/.local/bin/mise" activate "$shell_name")"
    else
      eval "$("${HOME}/.local/bin/mise" activate --shims)"
    fi
  fi

  mise settings exec_auto_install=false
  mise settings experimental=true
  mise settings fetch_remote_versions_timeout=60s
  mise settings http_timeout=60s
  mise settings idiomatic_version_file=false
  mise settings not_found_auto_install=false
  mise settings task_run_auto_install=false
  mise settings use_versions_host=false

  mise use -g usage

  mise use -g bat curlie dua eza fd gdu hyperfine zoxide rg fzf
  curl -LSfs https://raw.githubusercontent.com/eza-community/eza/refs/heads/main/completions/zsh/_eza -o "${HOME}/.local/share/zsh/completions/_eza"
  mise x fd -- fd --gen-completions=zsh >"${HOME}/.local/share/zsh/completions/_fd"
  mise x bat -- bat --completion zsh >"${HOME}/.local/share/zsh/completions/_bat"
  mise x rg -- rg --generate complete-zsh >"${HOME}/.local/share/zsh/completions/_rg"

  mise use -g cosign slsa-verifier

  mise use -g jq yq

  mise use -g awscli amazon-ecr-credential-helper

  mise use -g terraform terragrunt tflint terraform-docs

  mise use -g kubectl eksctl k9s helm argocd

  mise use -g go

  mise use -g uv pre-commit

  mise use -g java@corretto-17 maven

  mise install node@20 && mise use -g node@22

  mise plugins install 1password-cli https://github.com/mise-plugins/mise-1password-cli.git
  mise use -g 1password-cli

  mise use -g neovim gitui
}

install_tmux_plugins() {
  _info "INSTALL TMUX PLUGINS"

  local plugin_path="${HOME}/.config/tmux/plugins"
  local tpm_path="${plugin_path}/tpm"

  rm -rf "${tpm_path}"
  git clone --depth 1 https://github.com/tmux-plugins/tpm "${tpm_path}"

  "${tpm_path}/bin/install_plugins"
}

install_nvim_plugins() {
  _info "INSTALL NEOVIM PLUGINS"

  mise x neovim -- nvim +q

  echo "They've been installed"
}

configure_docker_completion() {
  _info "CONFIGURE DOCKER COMPLETION"

  if command -v docker >/dev/null 2>&1; then
    printf "Docker command found\n"

    if [ -d "${HOME}/.local/share/zsh/completions" ]; then
      printf "%s directory found\n" "${HOME}/.local/share/zsh/completions"

      docker completion zsh >"${HOME}/.local/share/zsh/completions/_docker"

      printf "Docker zsh completion script has been generated at %s\n\n" "${HOME}/.local/share/zsh/completions/_docker"
    else
      printf "%s directory not found\n\n" "${HOME}/.local/share/zsh/completions"
    fi
  else
    printf "Docker command not found\n\n"
  fi
}

completed_message() {
  _info "EVERYTHING WORKED"

  cat <<EOF
Check out the README file on GitHub to do 1 quick thing manually:

https://github.com/sassdavid/dotfiles#did-you-install-everything-successfully

You can safely close this terminal.

The next time you open your terminal everything will be ready to go!
EOF
}

detect_env
create_initial_dirs
install_packages
clone_or_update_dotfiles
install_zsh_plugins
create_symlinks
configure_shell
configure_git
install_rust
install_mise
install_mongodb_stuffs
install_tmux_plugins
install_nvim_plugins
configure_docker_completion
completed_message
