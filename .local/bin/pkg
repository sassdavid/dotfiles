#!/usr/bin/env bash
# Manage packages using Pacman (Arch) and Paru (AUR) repositories.

set -o errexit
set -o pipefail
set -o nounset

if [ -r /etc/os-release ]; then
  # shellcheck disable=SC1091
  OS_DISTRO="$(. /etc/os-release && echo "${ID_LIKE:-${ID}}")"
  if [ "${OS_DISTRO}" != "arch" ]; then
    echo "This script is only available on Arch Linux, sorry!" >&2
    exit 1
  fi
fi

POSITION=0
CMD=
AUR=

usage() {
  cat <<EOF
Usage examples:

  pkg CMD [-a|--aur]

  pkg install          # Install / search new packages
  ^ pacman -Syu

  pkg install --aur    # Install / search new AUR packages
  ^ paru -Syu

  pkg list             # List locally installed packages
  ^ pacman -Qei

  pkg list --aur       # List locally installed AUR packages
  ^ paru -Qm

  pkg remove           # Remove installed packages
  ^ pacman -Rns

  pkg remove --aur     # Remove installed AUR packages
  ^ pacman -Rns
EOF
}

while [[ "${#}" -gt 0 ]]; do
  case "${1}" in
  -h | --help | help)
    usage
    exit 0
    ;;
  -a | --aur)
    AUR="true"

    shift
    ;;
  *)
    case "${POSITION}" in
    0)
      CMD="${1}"

      POSITION=1
      shift
      ;;
    1)
      printf "Unknown argument: %s\n\n" "${1}" >&2
      usage >&2
      exit 1
      ;;
    esac
    ;;
  esac
done

[[ -z "${CMD}" ]] && usage >&2 && exit 1

fzf_args() {
  local prompt="${1}"
  local preview="${2}"
  local tiebreak="${3:-}"

  local args=(
    --multi
    --prompt "${prompt} "
    --delimiter "::"
    --preview "${preview}"
    --preview-window "down:55%:wrap"
    --preview-label-pos "bottom"
    --preview-label " tab: multi-select, shift+tab: deselect "
  )

  [ -n "${tiebreak}" ] && args+=(--nth "1,2" --tiebreak "begin,index")

  printf "%s\n" "${args[@]}"
}

install() {
  local packages=

  # shellcheck disable=SC2016
  mapfile -t fzf_opts \
    < <(fzf_args "Search packages to install..." 'pacman -Si $(echo {} | cut -d " " -f 1)' "tiebreak")

  packages="$(
    pacman -Ss "" | awk '
    /^[a-z]+\/[^\s]+/ {
      split($1,a,"/")
      pkg = a[2]
      getline desc
      sub(/^[ \t]+/, "", desc)
      printf "%s :: %s\n", pkg, desc
    }' |
      fzf "${fzf_opts[@]}" | cut -d " " -f 1
  )"

  if [ -n "${packages}" ]; then
    # shellcheck disable=SC2086
    sudo pacman -Syu ${packages}
  fi
}

install_aur() {
  local packages=

  local query packages=

  read -rp "Enter AUR search query (at least 2 characters): " query

  if [[ ${#query} -lt 2 ]]; then
    echo "'${query}' must be 2 or more characters, aborting!" >&2
    exit 1
  fi

  # shellcheck disable=SC2016
  mapfile -t fzf_opts \
    < <(fzf_args "Filter AUR packages to install..." 'paru -Si $(echo {} | cut -d " " -f 1)' "tiebreak")

  packages="$(
    paru -Ssa "$query" | awk '
      /^[^ ]/ {
        split($1, a, "/")
        pkg = a[2]
        next
      }
      /^[ ]/ {
        desc = $0
        sub(/^[ \t]+/, "", desc)
        printf "%s :: %s\n", pkg, desc
      }
    ' |
      fzf "${fzf_opts[@]}" | cut -d " " -f 1
  )"

  if [ -n "${packages}" ]; then
    # shellcheck disable=SC2086
    paru -Syu ${packages}
  fi
}
list() {
  local packages=

  # shellcheck disable=SC2016
  mapfile -t fzf_opts \
    < <(fzf_args "Search installed packages..." 'pacman -Qi $(echo {} | cut -d " " -f 1)' "tiebreak")

  packages="$(
    pacman -Qei | awk '
    BEGIN { name = ""; desc = "" }
    /^Name\s*:/ { name = $3 }
    /^Description\s*:/ { desc = substr($0, index($0,$3)) }
    /^$/ && name != "" && desc != "" {
      printf "%s :: %s\n", name, desc
      name = ""; desc = ""
    }' | fzf "${fzf_opts[@]}"
  )"
}

list_aur() {
  local packages=

  # shellcheck disable=SC2016
  mapfile -t fzf_opts \
    < <(fzf_args "Search installed AUR packages..." 'paru -Qi $(echo {} | cut -d" " -f1)' "tiebreak")

  packages="$(
    paru -Qm | awk '
    {
      pkg = $1
      cmd = "paru -Qi " pkg " 2>/dev/null | grep -m1 \"^Description\""
      desc = ""
      if ((cmd | getline line) > 0) {
        sub(/^[^:]*:\s*/, "", line)
        desc = line
      }
      close(cmd)
      printf "%s :: %s\n", pkg, desc
    }' | fzf "${fzf_opts[@]}"
  )"
}

remove() {
  local packages=

  # shellcheck disable=SC2016
  mapfile -t fzf_opts \
    < <(fzf_args "Search installed packages to remove..." 'pacman -Qi $(echo {} | cut -d " " -f 1)' "tiebreak")

  packages="$(
    pacman -Qei | awk '
    BEGIN { name = ""; desc = "" }
    /^Name\s*:/ { name = $3 }
    /^Description\s*:/ { desc = substr($0, index($0,$3)) }
    /^$/ && name != "" && desc != "" {
      printf "%s :: %s\n", name, desc
      name = ""; desc = ""
    }' | fzf "${fzf_opts[@]}" | cut -d " " -f 1
  )"

  if [ -n "${packages}" ]; then
    # shellcheck disable=SC2086
    sudo pacman -Rns ${packages}
  fi
}

remove_aur() {
  local packages=

  # shellcheck disable=SC2016
  mapfile -t fzf_opts \
    < <(fzf_args "Search installed AUR packages to remove..." 'paru -Qi $(echo {} | cut -d " " -f 1)' "tiebreak")

  # This is the same code as listing from the AUR plus an added cut pipe. This
  # could be refactored at some point, for now it's not the end of the world.
  packages="$(
    paru -Qm | awk '
    {
      pkg = $1
      cmd = "paru -Qi " pkg " 2>/dev/null | grep -m1 \"^Description\""
      desc = ""
      if ((cmd | getline line) > 0) {
        sub(/^[^:]*:\s*/, "", line)
        desc = line
      }
      close(cmd)
      printf "%s :: %s\n", pkg, desc
    }' | fzf "${fzf_opts[@]}" | cut -d " " -f 1
  )"

  if [ -n "${packages}" ]; then
    # shellcheck disable=SC2086
    sudo pacman -Rns ${packages}
  fi
}

if [[ "${CMD}" = "install" && -z "${AUR}" ]]; then
  install
elif [[ "${CMD}" = "install" && -n "${AUR}" ]]; then
  install_aur
elif [[ "${CMD}" = "list" && -z "${AUR}" ]]; then
  list
elif [[ "${CMD}" = "list" && -n "${AUR}" ]]; then
  list_aur
elif [[ "${CMD}" = "remove" && -z "${AUR}" ]]; then
  remove
elif [[ "${CMD}" = "remove" && -n "${AUR}" ]]; then
  remove_aur
else
  printf "Unknown command: %s\n\n" "${CMD}" >&2
  usage >&2
  exit 1
fi
