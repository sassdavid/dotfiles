#!/usr/bin/env python3

import argparse
import fileinput
import os
import re
import sys
import textwrap
from pathlib import Path
from subprocess import PIPE, run


def get_windows_user():
    try:
        result = run(
            ["/c/Program Files/PowerShell/7/pwsh.exe", "-Command", "$env:UserName"],
            stdout=PIPE,
            universal_newlines=True,
        )

        return result.stdout.rstrip()
    except FileNotFoundError:
        result = ""

    return None


TERMINALS = {
    "windows-terminal": {
        "path": f"/c/Users/{get_windows_user()}/AppData/Local/Packages/Microsoft.WindowsTerminal_8wekyb3d8bbwe/LocalState/settings.json",  # noqa: E501
        "matches": [
            {
                "find": '"colorScheme": ".*"',
                "replace": '"colorScheme": "%theme"',
            },
            {
                "find": '"theme": ".*"',
                "replace": '"theme": "%theme"',
            },
        ],
    }
}

THEMES = {
    "tokyonight-moon": {
        "terminal": "Tokyonight Moon",
    },
    "gruvbox-dark-medium": {
        "terminal": "Gruvbox Dark Medium",
        "nvim": {
            "colorscheme": "gruvbox",
            "variant": {
                "find": '^      contrast = ".*",$',
                "replace": '      contrast = "medium",',
            },
        },
    },
}

HOME = str(Path.home())
SHELL_CONFIG = f"{os.environ.get('XDG_CONFIG_HOME')}/zsh/.zshrc"
TMUX_CONFIG = f"{HOME}/.config/tmux/tmux.conf"
NVIM_COLORSCHEME_CONFIG = f"{HOME}/.config/nvim/lua/plugins/colorscheme.lua"
GITUI_CONFIG_PATH = f"{HOME}/.config/gitui"


def edit_inplace(file, preserve_symlinks=True):
    if preserve_symlinks:
        file = os.path.realpath(file)

    return fileinput.input(files=(file,), inplace=True)


def active_theme():
    try:
        with open(NVIM_COLORSCHEME_CONFIG, "r") as f:
            for line in f:
                match = re.match('^      colorscheme = "(.*)"', line)
                if match:
                    theme = match.group(1)
                    continue

        return theme
    except FileNotFoundError:
        sys.exit(f"ERROR: {NVIM_COLORSCHEME_CONFIG} not found")
    except NameError:
        sys.exit(
            f'ERROR: "colorscheme" not found in {NVIM_COLORSCHEME_CONFIG}'
        )


def change_terminal_theme(theme):
    terminal = TERMINALS["windows-terminal"]
    theme = THEMES[theme]["terminal"]
    unknown = """SKIPPING [Terminal]: Terminal config path unknown / not found

Please check the docs for this at:

https://github.com/nickjj/dotfiles#how-to-get-theme-support-in-your-terminal"""

    if not os.path.exists(terminal["path"]):
        print(unknown)
        return None

    with edit_inplace(terminal["path"]) as f:
        for line in f:
            for match in terminal["matches"]:
                line = re.sub(
                    rf"{match['find']}",
                    match["replace"].replace("%theme", theme),
                    line,
                )
            sys.stdout.write(line)


def change_tmux_theme(theme):
    with edit_inplace(TMUX_CONFIG) as f:
        for line in f:
            line = re.sub(
                r'\/themes\/.*\.conf"', f'/themes/{theme}.conf"', line
            )
            sys.stdout.write(line)

    run(["tmux", "source-file", TMUX_CONFIG])


def change_nvim_theme(theme):
    color_scheme = theme
    variant = None

    if THEMES[theme].get("nvim"):
        color_scheme = THEMES[theme]["nvim"]["colorscheme"]
        variant = THEMES[theme]["nvim"]["variant"]

    with edit_inplace(NVIM_COLORSCHEME_CONFIG) as f:
        for line in f:
            line = re.sub(
                r'^      colorscheme = ".*",$',
                f'      colorscheme = "{color_scheme}",',
                line,
            )

            if variant is not None:
                line = re.sub(rf"{variant['find']}", variant["replace"], line)

            sys.stdout.write(line)


def change_fzf_theme(theme):
    with edit_inplace(SHELL_CONFIG) as f:
        for line in f:
            line = re.sub(
                r'\/themes\/fzf\/.*\.sh"', f'/themes/fzf/{theme}.sh"', line
            )
            sys.stdout.write(line)


def change_gitui_theme(theme):
    # We want the symlink to be relative to the gitui config path instead
    # of including the user's home dir since this symlink is commit.
    os.chdir(GITUI_CONFIG_PATH)

    theme_path = f"{theme}.ron"
    link_path = "theme.ron"

    if os.path.exists(link_path):
        os.remove(link_path)

    os.symlink(theme_path, link_path)


def update_tmux_shells():
    print("Please run the 'SZ' alias to reload all of your tmux shells.")


def parseargs():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent("""\
        Set a specific theme for a number of command line tools.
        """),
    )
    parser.add_argument("theme", choices=THEMES, nargs="?", help="theme name")
    args = parser.parse_args()

    if len(sys.argv) == 1:
        parser.error("at least one argument is required")

    return args


def main():
    args = parseargs()

    theme = active_theme()

    if args.theme:
        theme = args.theme

    change_terminal_theme(theme)
    change_tmux_theme(theme)
    change_nvim_theme(theme)
    change_fzf_theme(theme)
    change_gitui_theme(theme)
    update_tmux_shells()


if __name__ == "__main__":
    main()
