#!/usr/bin/env bash

set -o errexit

# You can find the default values in the install script near the top of the
# file. Any value here which is empty will be ignored and the default value
# will be used. The non-example version of this file is git ignored.
#
# The goal of this config is to help you customize the defaults for a few
# common things without needing to fork the repo.
#
# I also use some of these to further customize my system with packages that
# I didn't push up to my dotfiles.

# Provide a different repo to use. If you're using GitHub you only need to
# update the DOTFILES_REPO_SLUG, ie. yourname/dotfiles instead of sassdavid/dotfiles.
#
# This could be useful if you've forked the project into your own repo.
export DOTFILES_REPO_SLUG=
export DOTFILES_CLONE_URL=
export DOTFILES_UPSTREAM_URL=

# If you define these, they will get used instead of prompting you. Keep in
# mind you won't be prompted once you've answered them once since the values
# get persisted and read independent of these values. Still, this could be
# handy to set for fresh systems to avoid ever needing to input them manually.
export YOUR_NAME=
export YOUR_EMAIL=

# Override which packages get installed. If you define anything in the extras
# variable they will get appended to the non-extra packages. This lets you use
# the default packages but add any extra packages you want.
#
# If you don't want to install any default packages then you can use a single
# quoted space as the value, for example: export PACMAN_PACKAGES=" "
export PACMAN_PACKAGES=
export PACMAN_PACKAGES_EXTRAS=

# Override which packages get installed. If you define anything in the extras
# variable they will get appended to the non-extra packages. This lets you use
# the default packages but add any extra packages you want.
#
# If you don't want to install any default packages then you can use a single
# quoted space as the value, for example: export AUR_PACKAGES=" "
export AUR_PACKAGES=
export AUR_PACKAGES_EXTRAS=

# Override which packages get installed. If you define anything in the extras
# variable they will get appended to the non-extra packages. This lets you use
# the default packages but add any extra packages you want.
#
# If you don't want to install any default packages then you can use a single
# quoted space as the value, for example: export APT_PACKAGES=" "
export APT_PACKAGES=
export APT_PACKAGES_EXTRAS=

# Override which packages get installed. If you define anything in the extras
# variable they will get appended to the non-extra packages. This lets you use
# the default packages but add any extra packages you want.
#
# If you don't want to install any default packages then you can use a single
# quoted space as the value, for example: export BREW_CASK_PACKAGES=" "
export BREW_PACKAGES=
export BREW_PACKAGES_EXTRAS=
export BREW_CASK_PACKAGES=
export BREW_CASK_PACKAGES_EXTRAS=

# Install Mise packages for specific platforms. For example, maybe you want
# the latest and greatest versions on Debian for a few tools but Arch and
# macOS already have them so you don't need Mise packages there.
#
# However, maybe on Arch if you want a specific version of a tool, you can
# use Mise to install it instead of ignoring it with Pacman to avoid a partial
# update of your system. It may also not exist in the official Arch repo too.
#
# If you don't want to install any default packages then you can use a single
# quoted space as the value, for example: export MISE_PACKAGES_DEBIAN=" "
export MISE_PACKAGES_ARCH=
export MISE_PACKAGES_ARCH_EXTRAS=

export MISE_PACKAGES_DEBIAN=
export MISE_PACKAGES_DEBIAN_EXTRAS=

export MISE_PACKAGES_MACOS=
export MISE_PACKAGES_MACOS_EXTRAS=

# Install programming languages.
#
# If you don't want to install any default languages then you can use a single
# quoted space as the value, for example: export MISE_LANGUAGES=" "
declare -A MISE_LANGUAGES=
declare -A MISE_LANGUAGES_EXTRAS=

# Here's an example to demonstrate the syntax. The key is the binary name and
# the value is what you would pass into Mise to install it.
# MISE_LANGUAGES_EXTRAS["ruby"]="ruby@3.4"

export MISE_LANGUAGES
export MISE_LANGUAGES_EXTRAS

# Symlinks that will get created in all operating systems. This lets you add
# your own custom tools and set up whatever configuration you may need. Chances
# are you'll want to customize the SYMLINKS_EXTRAS variable to add new things.
export SYMLINKS=(
  "ln -fns \"\${DOTFILES_PATH}/.config/bat/config\" \"\${HOME}/.config/bat/config\""
  "ln -fns \"\${DOTFILES_PATH}/.config/btop/btop.conf\" \"\${HOME}/.config/btop/btop.conf\""
  "ln -fns \"\${DOTFILES_PATH}/.config/fzf/config.sh\" \"\${HOME}/.config/fzf/config.sh\""
  "ln -fns \"\${DOTFILES_PATH}/.config/ghostty/config.local\" \"\${HOME}/.config/ghostty/config.local\""
  "ln -fns \"\${DOTFILES_PATH}/.config/ghostty/config\" \"\${HOME}/.config/ghostty/config\""
  "ln -fns \"\${DOTFILES_PATH}/.config/git/config.user.bitbucket\" \"\${HOME}/.config/git/config.user.bitbucket\""
  "ln -fns \"\${DOTFILES_PATH}/.config/git/config.user.personal\" \"\${HOME}/.config/git/config.user.personal\""
  "ln -fns \"\${DOTFILES_PATH}/.config/git/config.user.work\" \"\${HOME}/.config/git/config.user.work\""
  "ln -fns \"\${DOTFILES_PATH}/.config/git/config\" \"\${HOME}/.config/git/config\""
  "ln -fns \"\${DOTFILES_PATH}/.config/k9s/config.yaml\" \"\${HOME}/.config/k9s/config.yaml\""
  "ln -fns \"\${DOTFILES_PATH}/.config/nvim\" \"\${HOME}/.config/nvim\""
  "ln -fns \"\${DOTFILES_PATH}/.config/tmux/tmux.conf\" \"\${HOME}/.config/tmux/tmux.conf\""
  "ln -fns \"\${DOTFILES_PATH}/.config/zsh/.aliases.local\" \"\${HOME}/.config/zsh/.aliases.local\""
  "ln -fns \"\${DOTFILES_PATH}/.config/zsh/.aliases\" \"\${HOME}/.config/zsh/.aliases\""
  "ln -fns \"\${DOTFILES_PATH}/.config/zsh/.zprofile.local\" \"\${HOME}/.config/zsh/.zprofile.local\""
  "ln -fns \"\${DOTFILES_PATH}/.config/zsh/.zprofile\" \"\${HOME}/.config/zsh/.zprofile\""
  "ln -fns \"\${DOTFILES_PATH}/.config/zsh/.zshenv\" \"\${HOME}/.zshenv\""
  "ln -fns \"\${DOTFILES_PATH}/.config/zsh/.zshrc.local\" \"\${HOME}/.config/zsh/.zshrc.local\""
  "ln -fns \"\${DOTFILES_PATH}/.config/zsh/.zshrc\" \"\${HOME}/.config/zsh/.zshrc\""
  "ln -fns \"\${DOTFILES_PATH}/.local/bin/\"* \"\${HOME}/.local/bin/\""
)
export SYMLINKS_EXTRAS=

# Symlinks that will get created only in WSL.
export SYMLINKS_WSL=(
  "cp \"\${DOTFILES_PATH}/mnt/c/Users/sassd/AppData/Local/Packages/Microsoft.WindowsTerminal_8wekyb3d8bbwe/LocalState/settings.json\" \"/mnt/c/Users/%WindowsUser/AppData/Local/Packages/Microsoft.WindowsTerminal_8wekyb3d8bbwe/LocalState/settings.json\" || true"
  "sudo ln -fns \"\${DOTFILES_PATH}/etc/wsl.conf\" \"/etc/wsl.conf\""
  "ln -fns \"/mnt/c/Windows/System32/cmd.exe\" \"\${HOME}/.local/bin/cmd.exe\""
)
export SYMLINKS_WSL_EXTRAS=

# Symlinks that will get created only on Arch Linux.
export SYMLINKS_ARCH=(
  "sudo ln -fns \"\${DOTFILES_PATH}/etc/pacman.d/01-options.conf\" \"/etc/pacman.d/01-options.conf\""
)
export SYMLINKS_ARCH_EXTRAS=
